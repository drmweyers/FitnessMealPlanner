# FitnessMealPlanner Application Server Configuration
# Optimized for performance, security, and caching

server {
    listen 80;
    listen [::]:80;
    server_name localhost fitmeal.local;

    root /var/www/html;
    index index.html;

    # Health check endpoint (bypass rate limiting)
    location = /health {
        access_log off;
        proxy_pass http://app_backend/api/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Static Assets with Long-term Caching
    location ~* \.(css|js|woff|woff2|ttf|eot|ico|png|jpg|jpeg|gif|svg|webp)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Try serving static files directly, fallback to app
        try_files /uploads$uri @app_backend;
    }

    # Profile Images with Medium-term Caching
    location /uploads/profile-images/ {
        expires 30d;
        add_header Cache-Control "public";
        add_header Vary Accept-Encoding;
        
        # Serve from volume mount
        alias /var/www/uploads/profile-images/;
        
        # If file doesn't exist, proxy to app
        try_files $uri @app_backend;
    }

    # API Routes with Rate Limiting
    location /api/ {
        # Rate limiting for API endpoints
        limit_req zone=api burst=20 nodelay;
        
        # Special rate limiting for auth endpoints
        location ~ ^/api/(auth|login|register) {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://app_backend;
            include proxy_params.conf;
        }
        
        # Special rate limiting for upload endpoints
        location ~ ^/api/(profile|upload) {
            limit_req zone=upload burst=5 nodelay;
            client_max_body_size 10M;
            proxy_pass http://app_backend;
            include proxy_params.conf;
        }
        
        # Default API proxy
        proxy_pass http://app_backend;
        include proxy_params.conf;
        
        # API response caching for GET requests
        location ~ ^/api/(recipes|meal-plans) {
            proxy_cache app_cache;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            proxy_cache_revalidate on;
            proxy_cache_lock on;
            
            add_header X-Cache-Status $upstream_cache_status;
            
            proxy_pass http://app_backend;
            include proxy_params.conf;
        }
    }

    # React App (SPA) - All other routes
    location / {
        # Cache HTML files for short time
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
        
        # Try to serve static files, fallback to app for SPA routing
        try_files $uri $uri/ @app_backend;
    }

    # Fallback to application server
    location @app_backend {
        proxy_pass http://app_backend;
        include proxy_params.conf;
    }

    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|config|md)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Robots.txt
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /admin/\n";
    }
}

# HTTPS Configuration (production ready)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name localhost fitmeal.local;

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # HSTS (optional - enable for production)
    # add_header Strict-Transport-Security "max-age=63072000" always;

    # Include the same configuration as HTTP
    include /etc/nginx/conf.d/common.conf;
}

# Redirect HTTP to HTTPS (enable for production)
# server {
#     listen 80;
#     listen [::]:80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }