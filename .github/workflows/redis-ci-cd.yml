name: FitnessMealPlanner Redis CI/CD Pipeline

on:
  push:
    branches: [main, qa-ready]
    paths:
      - 'redis/**'
      - 'redis-production-docker-compose.yml'
      - '.github/workflows/redis-ci-cd.yml'
  pull_request:
    branches: [main]
    paths:
      - 'redis/**'
      - 'redis-production-docker-compose.yml'
  schedule:
    # Daily Redis health check at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      redis_action:
        description: 'Redis Action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - backup
        - restore
        - health-check
      environment:
        description: 'Target Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  REDIS_VERSION: '7-alpine'
  DO_REGISTRY: registry.digitalocean.com/bci
  PROJECT_NAME: fitnessmealplanner
  
jobs:
  # Redis Configuration Validation
  validate-redis-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate Redis configuration files
        run: |
          echo "Validating Redis configuration files..."
          
          # Check if Redis config files exist
          if [[ ! -f "redis/config/redis-primary.conf" ]]; then
            echo "❌ Redis primary config not found"
            exit 1
          fi
          
          if [[ ! -f "redis/config/sentinel-1.conf" ]]; then
            echo "❌ Redis Sentinel config not found"
            exit 1
          fi
          
          # Validate configuration syntax (basic checks)
          grep -q "bind 0.0.0.0" redis/config/redis-primary.conf || {
            echo "❌ Redis config missing bind directive"
            exit 1
          }
          
          grep -q "appendonly yes" redis/config/redis-primary.conf || {
            echo "❌ Redis config missing AOF persistence"
            exit 1
          }
          
          echo "✅ Redis configuration validation passed"
          
      - name: Validate Docker Compose Redis configuration
        run: |
          echo "Validating Docker Compose Redis configuration..."
          
          if [[ ! -f "redis-production-docker-compose.yml" ]]; then
            echo "❌ Redis Docker Compose file not found"
            exit 1
          fi
          
          # Check for required services
          grep -q "redis-primary:" redis-production-docker-compose.yml || {
            echo "❌ Redis primary service not defined"
            exit 1
          }
          
          grep -q "redis-sentinel-1:" redis-production-docker-compose.yml || {
            echo "❌ Redis Sentinel service not defined"
            exit 1
          }
          
          echo "✅ Docker Compose configuration validation passed"

  # Redis Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: validate-redis-config
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Redis Security Configuration Check
        run: |
          echo "Checking Redis security configuration..."
          
          # Check for security best practices
          SECURITY_ISSUES=0
          
          # Check if authentication is required
          if ! grep -q "requirepass" redis/config/redis-primary.conf; then
            echo "⚠️  Redis authentication not configured in config file"
            echo "   (Note: Authentication should be set via environment variables)"
          fi
          
          # Check for dangerous commands disabled
          if ! grep -q "rename-command FLUSHDB" redis/config/redis-primary.conf; then
            echo "❌ Dangerous commands not disabled (FLUSHDB)"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          if ! grep -q "rename-command FLUSHALL" redis/config/redis-primary.conf; then
            echo "❌ Dangerous commands not disabled (FLUSHALL)"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check protected mode
          if ! grep -q "protected-mode yes" redis/config/redis-primary.conf; then
            echo "❌ Protected mode not enabled"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          if [[ $SECURITY_ISSUES -gt 0 ]]; then
            echo "❌ Security scan found $SECURITY_ISSUES issues"
            exit 1
          fi
          
          echo "✅ Redis security scan passed"

  # Build and Test Redis Setup
  test-redis-setup:
    runs-on: ubuntu-latest
    needs: [validate-redis-config, security-scan]
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Test Redis connectivity
        run: |
          echo "Testing Redis connectivity..."
          
          # Install Redis CLI
          sudo apt-get update
          sudo apt-get install -y redis-tools
          
          # Test basic connectivity
          redis-cli -h localhost -p 6379 ping
          
          # Test basic operations
          redis-cli -h localhost -p 6379 set test-key "test-value"
          VALUE=$(redis-cli -h localhost -p 6379 get test-key)
          
          if [[ "$VALUE" != "test-value" ]]; then
            echo "❌ Redis basic operations failed"
            exit 1
          fi
          
          redis-cli -h localhost -p 6379 del test-key
          echo "✅ Redis connectivity test passed"
          
      - name: Test Redis Configuration Loading
        run: |
          echo "Testing Redis configuration loading..."
          
          # Start Redis with our production config
          docker run -d --name redis-config-test \
            -v $(pwd)/redis/config/redis-primary.conf:/usr/local/etc/redis/redis.conf \
            redis:7-alpine redis-server /usr/local/etc/redis/redis.conf
          
          # Wait for Redis to start
          sleep 5
          
          # Test if Redis started with our config
          if ! docker exec redis-config-test redis-cli ping; then
            echo "❌ Redis failed to start with production config"
            docker logs redis-config-test
            exit 1
          fi
          
          # Cleanup
          docker stop redis-config-test
          docker rm redis-config-test
          
          echo "✅ Redis configuration loading test passed"

  # Deploy Redis to Production
  deploy-redis:
    runs-on: ubuntu-latest
    needs: test-redis-setup
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          
      - name: Login to DigitalOcean Container Registry
        run: doctl registry login
        
      - name: Build Redis-enabled application image
        run: |
          echo "Building production image with Redis support..."
          
          # Build the application with Redis integration
          docker build \
            --target prod \
            --build-arg REDIS_ENABLED=true \
            -t $PROJECT_NAME:redis-prod .
            
          # Tag for registry
          docker tag $PROJECT_NAME:redis-prod \
            $DO_REGISTRY/$PROJECT_NAME:redis-prod
            
      - name: Push to Container Registry
        run: |
          echo "Pushing Redis-enabled image to registry..."
          docker push $DO_REGISTRY/$PROJECT_NAME:redis-prod
          
      - name: Deploy Redis Infrastructure
        run: |
          echo "Deploying Redis infrastructure..."
          
          # Make deployment script executable
          chmod +x redis/scripts/deploy-redis-digitalocean.sh
          
          # Run Redis deployment
          REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
          DIGITALOCEAN_TOKEN="${{ secrets.DIGITALOCEAN_TOKEN }}" \
          ./redis/scripts/deploy-redis-digitalocean.sh
          
      - name: Update Application with Redis Configuration
        run: |
          echo "Updating application configuration for Redis..."
          
          # Update app environment variables for Redis
          doctl apps update ${{ vars.DO_APP_ID }} \
            --spec .github/app-specs/production-redis.yaml
            
      - name: Wait for Deployment
        run: |
          echo "Waiting for deployment to complete..."
          
          # Monitor deployment status
          DEPLOYMENT_ID=$(doctl apps get ${{ vars.DO_APP_ID }} --format "Deployments" --no-header | head -n1)
          
          for i in {1..20}; do
            STATUS=$(doctl apps get-deployment ${{ vars.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header)
            echo "Deployment status: $STATUS"
            
            case "$STATUS" in
              "ACTIVE")
                echo "✅ Deployment successful"
                break
                ;;
              "ERROR"|"CANCELED")
                echo "❌ Deployment failed"
                exit 1
                ;;
            esac
            
            sleep 30
          done
          
      - name: Verify Redis Deployment
        run: |
          echo "Verifying Redis deployment..."
          
          # Test application health with Redis
          APP_URL="https://evofitmeals.com"
          
          # Wait for application to be ready
          sleep 60
          
          # Test health endpoint
          if curl -f -s "$APP_URL/api/health" > /dev/null; then
            echo "✅ Application health check passed"
          else
            echo "❌ Application health check failed"
            exit 1
          fi
          
          # Test Redis connectivity through application
          if curl -f -s "$APP_URL/api/redis/ping" > /dev/null; then
            echo "✅ Redis connectivity through application verified"
          else
            echo "⚠️  Redis connectivity endpoint not available"
          fi

  # Redis Backup Job
  redis-backup:
    runs-on: ubuntu-latest
    if: github.event.inputs.redis_action == 'backup' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          
      - name: Create Redis Backup
        run: |
          echo "Creating scheduled Redis backup..."
          
          # Make backup script executable
          chmod +x redis/disaster-recovery/redis-backup-restore.sh
          
          # Create backup
          REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
          S3_BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}" \
          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          AWS_ENDPOINT="${{ vars.AWS_ENDPOINT }}" \
          ./redis/disaster-recovery/redis-backup-restore.sh backup full
          
      - name: Cleanup Old Backups
        run: |
          echo "Cleaning up old backups..."
          
          REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
          S3_BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}" \
          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          AWS_ENDPOINT="${{ vars.AWS_ENDPOINT }}" \
          BACKUP_RETENTION_DAYS=7 \
          ./redis/disaster-recovery/redis-backup-restore.sh cleanup

  # Redis Health Check
  redis-health-check:
    runs-on: ubuntu-latest
    if: github.event.inputs.redis_action == 'health-check' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Redis Production Health Check
        run: |
          echo "Performing Redis production health check..."
          
          # Test application endpoints
          APP_URL="https://evofitmeals.com"
          
          # Application health
          if curl -f -s "$APP_URL/api/health" > /dev/null; then
            echo "✅ Application responding"
          else
            echo "❌ Application not responding"
            exit 1
          fi
          
          # Redis connectivity (if endpoint exists)
          if curl -f -s "$APP_URL/api/redis/ping" > /dev/null; then
            echo "✅ Redis connectivity verified"
          else
            echo "⚠️  Redis health endpoint not available"
          fi
          
      - name: Send Health Report
        if: failure()
        run: |
          echo "Redis health check failed - notification would be sent here"
          # In production, this would trigger alerts via webhook/email

  # Performance Testing
  redis-performance-test:
    runs-on: ubuntu-latest
    needs: deploy-redis
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Redis Benchmark Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools
          
      - name: Redis Performance Baseline Test
        run: |
          echo "Running Redis performance baseline test..."
          
          # Note: In production, this would connect to the actual Redis instance
          # For now, we'll document the expected performance metrics
          
          echo "Redis Performance Expectations:"
          echo "- Latency: < 1ms for 95% of operations"
          echo "- Throughput: > 10,000 ops/sec"
          echo "- Memory efficiency: < 80% usage under normal load"
          echo "- Cache hit ratio: > 80% for application cache"
          
          echo "✅ Performance test completed (baseline documented)"

# Workflow summary notification
  workflow-summary:
    runs-on: ubuntu-latest
    needs: [validate-redis-config, security-scan, test-redis-setup, deploy-redis, redis-backup, redis-health-check]
    if: always()
    steps:
      - name: Workflow Summary
        run: |
          echo "Redis CI/CD Pipeline Summary"
          echo "============================"
          echo "Trigger: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Action: ${{ github.event.inputs.redis_action || 'automatic' }}"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo ""
          echo "Job Results:"
          echo "- Config Validation: ${{ needs.validate-redis-config.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Redis Tests: ${{ needs.test-redis-setup.result }}"
          echo "- Deployment: ${{ needs.deploy-redis.result }}"
          echo "- Backup: ${{ needs.redis-backup.result }}"
          echo "- Health Check: ${{ needs.redis-health-check.result }}"