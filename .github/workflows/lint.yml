name: Lint Code

on:
  push:
    branches: [ main, qa-ready, qa-ready-clean ]
  pull_request:
    branches: [ main, qa-ready, qa-ready-clean ]

jobs:
  lint:
    name: ESLint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint on client (production code)
        run: npm run lint:client
        continue-on-error: false

      - name: Run ESLint on server
        run: npm run lint:server
        continue-on-error: true

      - name: Generate lint report
        if: always()
        run: |
          echo "## Lint Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Client Code (Production Frontend)" >> $GITHUB_STEP_SUMMARY
          npm run lint:client 2>&1 | tail -5 >> $GITHUB_STEP_SUMMARY || true
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Server Code" >> $GITHUB_STEP_SUMMARY
          npm run lint:server 2>&1 | tail -5 >> $GITHUB_STEP_SUMMARY || true

      - name: Comment PR with lint results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            let clientOutput = '';
            let serverOutput = '';

            try {
              clientOutput = execSync('npm run lint:client 2>&1', { encoding: 'utf-8' });
            } catch (error) {
              clientOutput = error.stdout || error.message;
            }

            try {
              serverOutput = execSync('npm run lint:server 2>&1', { encoding: 'utf-8' });
            } catch (error) {
              serverOutput = error.stdout || error.message;
            }

            const clientMatch = clientOutput.match(/‚úñ (\d+) problems? \((\d+) errors?, (\d+) warnings?\)/);
            const serverMatch = serverOutput.match(/‚úñ (\d+) problems? \((\d+) errors?, (\d+) warnings?\)/);

            const clientErrors = clientMatch ? parseInt(clientMatch[2]) : 0;
            const clientWarnings = clientMatch ? parseInt(clientMatch[3]) : 0;
            const serverErrors = serverMatch ? parseInt(serverMatch[2]) : 0;
            const serverWarnings = serverMatch ? parseInt(serverMatch[3]) : 0;

            const status = clientErrors === 0 ? '‚úÖ' : '‚ùå';

            const comment = `## ${status} Lint Report

            ### üìä Results Summary

            | Category | Errors | Warnings | Status |
            |----------|--------|----------|--------|
            | **Client (Production)** | ${clientErrors} | ${clientWarnings} | ${clientErrors === 0 ? '‚úÖ PASS' : '‚ùå FAIL'} |
            | **Server** | ${serverErrors} | ${serverWarnings} | ${serverErrors > 0 ? '‚ö†Ô∏è Review' : '‚úÖ OK'} |

            ### üéØ Details

            **Client Code (Production Frontend):**
            - ${clientErrors === 0 ? '‚úÖ No errors - production ready!' : `‚ùå ${clientErrors} error(s) must be fixed`}
            - ${clientWarnings} warning(s)

            **Server Code:**
            - ${serverErrors} error(s)
            - ${serverWarnings} warning(s)

            ${clientErrors > 0 ? '\n‚ö†Ô∏è **Action Required:** Please fix client code errors before merging.\n' : ''}
            ${clientErrors === 0 ? '\n‚ú® **Great work!** Client code is error-free and ready for production.\n' : ''}

            ---
            *Generated by [ESLint GitHub Action](https://eslint.org)*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
