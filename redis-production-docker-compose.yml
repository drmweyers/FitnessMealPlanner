# Redis Production Deployment Configuration
# DigitalOcean Container Registry Compatible
version: '3.8'

services:
  # Primary Redis instance for session storage and caching
  redis-primary:
    image: redis:7-alpine
    container_name: fitnessmealplanner-redis-primary
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --bind 0.0.0.0
      --port 6379
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
    volumes:
      - redis_data:/data
      - redis_config:/usr/local/etc/redis
      - ./redis/config/redis-primary.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - redis-network
      - app-network
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    labels:
      - "com.digitalocean.service=redis-primary"
      - "com.digitalocean.backup=true"
    profiles:
      - production
      - redis-cluster

  # Redis Sentinel for high availability monitoring
  redis-sentinel-1:
    image: redis:7-alpine
    container_name: fitnessmealplanner-redis-sentinel-1
    restart: unless-stopped
    command: >
      redis-sentinel /usr/local/etc/redis/sentinel.conf
      --sentinel
    volumes:
      - ./redis/config/sentinel-1.conf:/usr/local/etc/redis/sentinel.conf:ro
    ports:
      - "26379:26379"
    networks:
      - redis-network
    depends_on:
      - redis-primary
    environment:
      - REDIS_SENTINEL_MODE=true
      - REDIS_MASTER_NAME=fitnessmealplanner-master
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles:
      - production
      - redis-cluster

  # Redis Sentinel backup
  redis-sentinel-2:
    image: redis:7-alpine
    container_name: fitnessmealplanner-redis-sentinel-2
    restart: unless-stopped
    command: >
      redis-sentinel /usr/local/etc/redis/sentinel.conf
      --sentinel
    volumes:
      - ./redis/config/sentinel-2.conf:/usr/local/etc/redis/sentinel.conf:ro
    ports:
      - "26380:26379"
    networks:
      - redis-network
    depends_on:
      - redis-primary
    environment:
      - REDIS_SENTINEL_MODE=true
      - REDIS_MASTER_NAME=fitnessmealplanner-master
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles:
      - production
      - redis-cluster

  # Redis Exporter for Prometheus monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: fitnessmealplanner-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis-primary:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_EXPORTER_LOG_FORMAT=txt
    ports:
      - "9121:9121"
    networks:
      - redis-network
      - monitoring-network
    depends_on:
      - redis-primary
    profiles:
      - production
      - monitoring

  # Application service with Redis integration
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    container_name: fitnessmealplanner-prod-redis
    ports:
      - "${PORT:-5001}:5001"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=5001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fitmeal
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-primary:6379/0
      - REDIS_SESSION_DB=redis://:${REDIS_PASSWORD}@redis-primary:6379/1
      - REDIS_CACHE_DB=redis://:${REDIS_PASSWORD}@redis-primary:6379/2
      - SESSION_STORE=redis
      - CACHE_ENABLED=true
      - REDIS_SENTINEL_ENDPOINTS=redis-sentinel-1:26379,redis-sentinel-2:26379
      - REDIS_MASTER_NAME=fitnessmealplanner-master
    depends_on:
      postgres:
        condition: service_healthy
      redis-primary:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
      - redis-network
    profiles:
      - production

  # PostgreSQL database (existing)
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=fitmeal
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    profiles:
      - dev
      - prod
      - production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fitmeal"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis Commander for development/debugging
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fitnessmealplanner-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=primary:redis-primary:6379:0:${REDIS_PASSWORD}
      - HTTP_USER=admin
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-redisadmin}
    ports:
      - "8081:8081"
    networks:
      - redis-network
    depends_on:
      - redis-primary
    profiles:
      - development
      - redis-debug

networks:
  app-network:
    driver: bridge
    name: fitnessmealplanner-app-network
  redis-network:
    driver: bridge
    name: fitnessmealplanner-redis-network
  monitoring-network:
    driver: bridge
    name: fitnessmealplanner-monitoring-network

volumes:
  postgres_data:
    name: fitnessmealplanner-postgres-data
  redis_data:
    name: fitnessmealplanner-redis-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/redis/data
  redis_config:
    name: fitnessmealplanner-redis-config
    driver: local